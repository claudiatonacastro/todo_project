# Generated by Django 5.1.6 on 2025-08-11 20:52

from django.db import migrations

SQL_CREATE = r"""
-- 1) due_date no puede ser anterior a hoy (INSERT)
CREATE TRIGGER IF NOT EXISTS trg_tasks_due_date_ins
BEFORE INSERT ON tasks_task
FOR EACH ROW
WHEN NEW.due_date IS NOT NULL
 AND NEW.due_date < DATE('now','localtime')
BEGIN
  SELECT RAISE(ABORT, 'La fecha de vencimiento no puede ser anterior a hoy.');
END;

-- 1) due_date no puede ser anterior a hoy (UPDATE)
CREATE TRIGGER IF NOT EXISTS trg_tasks_due_date_upd
BEFORE UPDATE OF due_date ON tasks_task
FOR EACH ROW
WHEN NEW.due_date IS NOT NULL
 AND NEW.due_date < DATE('now','localtime')
BEGIN
  SELECT RAISE(ABORT, 'La fecha de vencimiento no puede ser anterior a hoy.');
END;

-- 2) Validar prioridad (INSERT)
CREATE TRIGGER IF NOT EXISTS trg_tasks_priority_ins
BEFORE INSERT ON tasks_task
FOR EACH ROW
WHEN NEW.priority NOT IN ('Alta','Media','Baja')
BEGIN
  SELECT RAISE(ABORT, 'Prioridad inválida. Debe ser Alta, Media o Baja.');
END;

-- 2) Validar prioridad (UPDATE)
CREATE TRIGGER IF NOT EXISTS trg_tasks_priority_upd
BEFORE UPDATE OF priority ON tasks_task
FOR EACH ROW
WHEN NEW.priority NOT IN ('Alta','Media','Baja')
BEGIN
  SELECT RAISE(ABORT, 'Prioridad inválida. Debe ser Alta, Media o Baja.');
END;

-- 3) Rechazar títulos vacíos o solo espacios (INSERT)
CREATE TRIGGER IF NOT EXISTS trg_tasks_title_check_ins
BEFORE INSERT ON tasks_task
FOR EACH ROW
WHEN NEW.title IS NULL OR LENGTH(TRIM(NEW.title)) = 0
BEGIN
  SELECT RAISE(ABORT, 'El título no puede estar vacío.');
END;

-- 3) Rechazar títulos vacíos o solo espacios (UPDATE)
CREATE TRIGGER IF NOT EXISTS trg_tasks_title_check_upd
BEFORE UPDATE OF title ON tasks_task
FOR EACH ROW
WHEN NEW.title IS NULL OR LENGTH(TRIM(NEW.title)) = 0
BEGIN
  SELECT RAISE(ABORT, 'El título no puede estar vacío.');
END;
"""

SQL_DROP = r"""
DROP TRIGGER IF EXISTS trg_tasks_due_date_ins;
DROP TRIGGER IF EXISTS trg_tasks_due_date_upd;
DROP TRIGGER IF EXISTS trg_tasks_priority_ins;
DROP TRIGGER IF EXISTS trg_tasks_priority_upd;
DROP TRIGGER IF EXISTS trg_tasks_title_check_ins;
DROP TRIGGER IF EXISTS trg_tasks_title_check_upd;
"""

class Migration(migrations.Migration):

    dependencies = [
        ('tasks', '0005_category_task_category'),
    ]

    operations = [
        migrations.RunSQL(SQL_CREATE, reverse_sql=SQL_DROP),
    ]